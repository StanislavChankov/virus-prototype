//// <auto-generated>
//using System.Collections.Generic;
//using Microsoft.Xna.Framework;

//namespace Synergy.VirusPrototype.Shared.Drawers
//{
//	interface IArcDrawer
//	{

//	}

//	public class ArcDrawer : IArcDrawer
//	{
//		/// <summary>
//		/// Draw a arc
//		/// </summary>
//		/// <param name="spriteBatch">The destination drawing surface</param>
//		/// <param name="center">The center of the arc</param>
//		/// <param name="radius">The radius of the arc</param>
//		/// <param name="sides">The number of sides to generate</param>
//		/// <param name="startingAngle">The starting angle of arc, 0 being to the east, increasing as you go clockwise</param>
//		/// <param name="radians">The number of radians to draw, clockwise from the starting angle</param>
//		/// <param name="color">The color of the arc</param>
//		public static void DrawArc(this SpriteBatch spriteBatch, Vector2 center, float radius, int sides, float startingAngle, float radians, Color color)
//		{
//			DrawArc(spriteBatch, center, radius, sides, startingAngle, radians, color, 1.0f);
//		}

//		/// <summary>
//		/// Draw a arc
//		/// </summary>
//		/// <param name="spriteBatch">The destination drawing surface</param>
//		/// <param name="center">The center of the arc</param>
//		/// <param name="radius">The radius of the arc</param>
//		/// <param name="sides">The number of sides to generate</param>
//		/// <param name="startingAngle">The starting angle of arc, 0 being to the east, increasing as you go clockwise</param>
//		/// <param name="radians">The number of radians to draw, clockwise from the starting angle</param>
//		/// <param name="color">The color of the arc</param>
//		/// <param name="thickness">The thickness of the arc</param>
//		public static void DrawArc(this SpriteBatch spriteBatch, Vector2 center, float radius, int sides, float startingAngle, float radians, Color color, float thickness)
//		{
//			List<Vector2> arc = CreateArc(radius, sides, startingAngle, radians);
//			//List<Vector2> arc = CreateArc2(radius, sides, startingAngle, degrees);
//			DrawPoints(spriteBatch, center, arc, color, thickness);
//		}

//		/// <summary>
//		/// Creates a list of vectors that represents an arc
//		/// </summary>
//		/// <param name="radius">The radius of the arc</param>
//		/// <param name="sides">The number of sides to generate in the circle that this will cut out from</param>
//		/// <param name="startingAngle">The starting angle of arc, 0 being to the east, increasing as you go clockwise</param>
//		/// <param name="radians">The radians to draw, clockwise from the starting angle</param>
//		/// <returns>A list of vectors that, if connected, will create an arc</returns>
//		private static List<Vector2> CreateArc(float radius, int sides, float startingAngle, float radians)
//		{
//			List<Vector2> points = new List<Vector2>();
//			points.AddRange(CreateCircle(radius, sides));
//			points.RemoveAt(points.Count - 1); // remove the last point because it's a duplicate of the first

//			// The circle starts at (radius, 0)
//			double curAngle = 0.0;
//			double anglePerSide = MathHelper.TwoPi / sides;

//			// "Rotate" to the starting point
//			while ((curAngle + (anglePerSide / 2.0)) < startingAngle)
//			{
//				curAngle += anglePerSide;

//				// move the first point to the end
//				points.Add(points[0]);
//				points.RemoveAt(0);
//			}

//			// Add the first point, just in case we make a full circle
//			points.Add(points[0]);

//			// Now remove the points at the end of the circle to create the arc
//			int sidesInArc = (int)((radians / anglePerSide) + 0.5);
//			points.RemoveRange(sidesInArc + 1, points.Count - sidesInArc - 1);

//			return points;
//		}
//	}
//}
