// <auto-generated>
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Xna.Framework;

namespace Synergy.VirusPrototype.Shared
{
	public static class SharedProgram
	{
		public static Game Game { get; private set; }

		public static async Task Main(string[] args)
		{
			try
			{
				await BuildHost(args).RunAsync();
			}
			catch (Exception)
			{
				Process.GetCurrentProcess().Kill();
			}
		}

		public static IHost BuildHost(string[] args)
			 => Host.CreateDefaultBuilder(args)
				.ConfigureServices((builderContext, services) =>
				{
					new Startup(builderContext.HostingEnvironment).ConfigureServices(services);

					using (var game = services.BuildServiceProvider().GetRequiredService<Game>())
					{
						Game = game;

						game.Run();
					}
				})
				.UseConsoleLifetime()
				.Build();
	}
}
